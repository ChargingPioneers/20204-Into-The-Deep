/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.teamcode.constants.TeleOpServoConstantsSigmaAddition;
import com.qualcomm.robotcore.hardware.ColorSensor;
import java.lang.Math;

import java.util.TimerTask;
import java.util.Timer;

/*
 * This file contains an example of an iterative (Non-Linear) "OpMode".
 * An OpMode is a 'program' that runs in either the autonomous or the teleop period of an FTC match.
 * The names of OpModes appear on the menu of the FTC Driver Station.
 * When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all iterative OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */

@TeleOp(name="TestingWithLogieBearSigmaAddition", group="Iterative OpMode")

public class TestingWithLogieBearSigmaAddition extends OpMode {
    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor vExMotor = null;
    private DcMotor vExMotor2 = null;
    private DcMotor hExMotor = null;
    private DcMotor FLMotor = null;
    private DcMotor FRMotor = null;
    private DcMotor BLMotor = null;
    private DcMotor BRMotor = null;
    //private CRServo IServo = null;
    private DcMotor IMotor = null;
    private Servo topPinchServo = null;
    private Servo rRServo = null;
    private Servo rLServo = null;
    private Servo lRServo = null;
    private Servo lLServo = null;
    private Servo topLServo = null;
    private Servo topRServo = null;
    private Servo topWristServo = null;
    private Servo wristJinkServo = null;


    private boolean dPadUpPressed;
    private boolean dPadDownPressed;
    private boolean dPadLeftPressed;
    private boolean dPadRightPressed;
    private boolean leftBumperPressed;
    private boolean rightBumperPressed;
    private boolean xButtonPressed;
    private boolean aButtonPressed;
    private boolean bButtonPressed;
    private boolean yButtonPressed;
    private double lTriggerPressed;
    private double rTriggerPressed;

    private boolean isArmMoving = false;
    private boolean isIntakeMoving = false;
    private boolean isTargetAndCurrentvExPositionTheSame = false;
    private boolean isTargetAndCurrenthExPositionTheSame = false;
    //private boolean isTargetAndCurrentLAPositionTheSame = false;
    //private boolean isTargetAndCurrentRAPositionTheSame = false;

    private double[] topPinchPositions = TeleOpServoConstantsSigmaAddition.topPinchPositions;
    private double[] rRPositions = TeleOpServoConstantsSigmaAddition.rRPositions;
    private double[] lLPositions = TeleOpServoConstantsSigmaAddition.lLPositions;
    //private double[] wristJinkPositions = TeleOpServoConstantsSigmaAddition.wristJinkPositions;
    private double[] topLPositions = TeleOpServoConstantsSigmaAddition.topLPositions;
    private double[] topRPositions = TeleOpServoConstantsSigmaAddition.topRPositions;
    private double[] topWristPositions = TeleOpServoConstantsSigmaAddition.topWristPositions;
    private int[] vExPositions = TeleOpServoConstantsSigmaAddition.vExPositions;
    private int[] vExPositions2 = TeleOpServoConstantsSigmaAddition.vExPositions2;
    private int[] hExPositions = TeleOpServoConstantsSigmaAddition.hExPositions;

    //private int[]LAPositions = TeleOpServoConstants.LAPositions;
    //private int[]RAPositions = TeleOpServoConstants.RAPositions;

    private boolean isBPressed = false;

    private boolean oldDPadUpPressed = false;
    private boolean oldDPadLeftPressed = false;
    private boolean oldDPadDownPressed = false;
    private boolean oldDPadRightPressed = false;
    private boolean oldLeftBumperPressed = false;
    private boolean oldRightBumperPressed = false;
    private boolean oldxButtonPressed = false;
    private boolean oldaButtonPressed = false;
    private boolean oldbButtonPressed = false;
    private boolean oldyButtonPressed = false;

    private boolean intakeManualMode = true;
    private boolean wasBPressed = false;

    private final int DELAY_BETWEEN_MOVES = 100;
    Timer timer;




    class vExPosition extends TimerTask {
        int i;
        double power;

        public vExPosition(int i, double power) {
            this.i = i;
            this.power = power;

        }

        public void run() {
            vExMotor.setTargetPosition(vExPositions[i]);
            vExMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            vExMotor.setPower(power);
        }
    }



    class vExPosition2 extends TimerTask {
        int i;
        double power;

        public vExPosition2(int i, double power) {
            this.i = i;
            this.power = power;

        }

        public void run() {
            vExMotor2.setTargetPosition(vExPositions2[i]);
            vExMotor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            vExMotor2.setPower(power);
        }
    }
    class vExPower extends TimerTask {
        double power;

        public vExPower(double power) {
            this.power = power;

        }

        public void run() {
            vExMotor.setPower(power);
            vExMotor2.setPower(power);
        }
    }


    class hExPosition extends TimerTask {
        int i;
        double power;

        public hExPosition(int i, double power) {
            this.i = i;
            this.power = power;

        }

        public void run() {
            hExMotor.setTargetPosition(hExPositions[i]);
            hExMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            hExMotor.setPower(power);
        }
    }

    class rRPosition extends TimerTask {
        int i;

        public rRPosition(int i) {
            this.i = i;
        }

        public void run() {
            rRServo.setPosition(rRPositions[i]);
        }
    }


    class setIsArmMoving extends TimerTask {
        boolean i;

        public setIsArmMoving(boolean i) {
            this.i = i;
        }

        public void run() {
            isArmMoving = i;
        }
    }

    class setIsIntakeMoving extends TimerTask {
        boolean i;

        public setIsIntakeMoving(boolean i) {
            this.i = i;
        }

        public void run() {
            isIntakeMoving = i;
        }
    }
    class setManualMode extends TimerTask {
        boolean i;

        public setManualMode(boolean i) {
            this.i = i;
        }

        public void run() {
            intakeManualMode = i;
            wasBPressed = !i;
        }
    }


    class lLPosition extends TimerTask {
        int i;

        public lLPosition(int i) {
            this.i = i;
        }

        public void run() {
            lLServo.setPosition(lLPositions[i]);
        }
    }


    class topLPosition extends TimerTask {
        int i;

        public topLPosition(int i) {
            this.i = i;
        }

        public void run() {
            topLServo.setPosition(topLPositions[i]);
        }
    }

    class topRPosition extends TimerTask {
        int i;

        public topRPosition(int i) {
            this.i = i;
        }

        public void run() {
            topRServo.setPosition(topRPositions[i]);
        }
    }

    class topWristPosition extends TimerTask {
        int i;

        public topWristPosition(int i) {
            this.i = i;
        }

        public void run() {
            topWristServo.setPosition(topWristPositions[i]);
        }
    }

    class topPinchPosition extends TimerTask {
        int i;

        public topPinchPosition(int i) {
            this.i = i;
        }

        public void run() {
            topPinchServo.setPosition(topPinchPositions[i]);
        }
    }



    /*
     * Code to run ONCE when the driver hits INIT
     */
    @Override
    public void init() {
        telemetry.addData("Status", "Initialized");

        // Initialize the hardware variables. Note that the strings used here as parameters
        // to 'get' must correspond to the names assigned during the robot configuration
        // step (using the FTC Robot Controller app on the phone).
        vExMotor = hardwareMap.get(DcMotor.class, "vEx");
        vExMotor2 = hardwareMap.get(DcMotor.class, "vEx2");
        hExMotor = hardwareMap.get(DcMotor.class, "hEx");
        //IServo = hardwareMap.get(CRServo.class, "IS");
        IMotor = hardwareMap.get(DcMotor.class, "IM");
        FLMotor = hardwareMap.get(DcMotor.class, "FL");
        FRMotor = hardwareMap.get(DcMotor.class, "FR");
        BLMotor = hardwareMap.get(DcMotor.class, "BL");
        BRMotor = hardwareMap.get(DcMotor.class, "BR");
        //LAMotor = hardwareMap.get(DcMotor.class, "LA");
        // RAMotor = hardwareMap.get(DcMotor.class, "RA");
        topPinchServo = hardwareMap.get(Servo.class, "Top Pinch");
//        bottomPinchServo = hardwareMap.get(Servo.class, "Bottom Pinch");
        rRServo = hardwareMap.get(Servo.class, "RR");
        rLServo = hardwareMap.get(Servo.class, "RL");
        lRServo = hardwareMap.get(Servo.class, "LR");
        lLServo = hardwareMap.get(Servo.class, "LL");
        topLServo = hardwareMap.get(Servo.class, "TL");
        topRServo = hardwareMap.get(Servo.class, "TR");
        topWristServo = hardwareMap.get(Servo.class, "TW");
//        wristJinkServo = hardwareMap.get(Servo.class, "Wrist (Jink) Servo");
        timer = new Timer();

        vExMotor.setTargetPosition(vExPositions[0]);
        vExMotor2.setTargetPosition(vExPositions2[0]);
        hExMotor.setTargetPosition(hExPositions[0]);


        //LAMotor.setTargetPosition(LAPositions[0]);
        //RAMotor.setTargetPosition(RAPositions[0]);


        vExMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        vExMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        vExMotor2.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        vExMotor2.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        hExMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        hExMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

       /* IMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        IMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
*/
        

        //LAMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        // LAMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        // RAMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        // RAMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);


        FLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        FRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BLMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        BRMotor.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        // To drive forward, most robots need the motor on one side to be reversed, because the axles point in opposite directions.
        // Pushing the left stick forward MUST make robot go forward. So adjust these two lines based on your first test drive.
        // Note: The settings here assume direct drive on left and right wheels.  Gear Reduction or 90 Deg drives may require direction flips
        IMotor.setDirection(DcMotor.Direction.FORWARD);
        vExMotor.setDirection(DcMotor.Direction.FORWARD);
        vExMotor2.setDirection(DcMotor.Direction.FORWARD);
        hExMotor.setDirection(DcMotor.Direction.FORWARD);
        FLMotor.setDirection(DcMotor.Direction.REVERSE);
        FRMotor.setDirection(DcMotor.Direction.FORWARD);
        BLMotor.setDirection(DcMotor.Direction.REVERSE);
        BRMotor.setDirection(DcMotor.Direction.FORWARD);
        //RAMotor.setDirection(DcMotor.Direction.FORWARD);
        //LAMotor.setDirection(DcMotor.Direction.FORWARD);


        // Tell the driver that initialization is complete.
        telemetry.addData("Status", "Initialized");

        //Wrist Postition
    }

    /*
     * Code to run REPEATEDLY after the driver hits INIT, but before they hit PLAY
     */
    @Override
    public void init_loop() {

       // initalized position
        topLServo.setPosition(topLPositions[4]);
        topRServo.setPosition(topRPositions[4]);
        rRServo.setPosition(rRPositions[3]);
        lLServo.setPosition(lLPositions[3]);
        topWristServo.setPosition(topWristPositions[3]);
        topPinchServo.setPosition(topPinchPositions[1]);

    }

    /*
     * Code to run ONCE when the driver hits PLAY
     */
    @Override
    public void start() {
        runtime.reset();
    }

    /*
     * Code to run REPEATEDLY after the driver hits PLAY but before they hit STOP
     */
    @Override
    public void loop() {
// - This uses basic math to combine motions and is easier to drive straight.
        double r = Math.hypot(gamepad1.left_stick_x, -gamepad1.left_stick_y);
        double robotAngle = Math.atan2(-gamepad1.left_stick_y, gamepad1.left_stick_x) - Math.PI / 4;
        double rightX = gamepad1.right_stick_x;
        final double FLPower = r * Math.cos(robotAngle) + rightX;
        final double FRPower = r * Math.sin(robotAngle) - rightX;
        final double BLPower = r * Math.sin(robotAngle) + rightX;
        final double BRPower = r * Math.cos(robotAngle) - rightX;

        // Send calculated power to wheels
        if (gamepad1.right_bumper || gamepad1.left_bumper) {
            if (-gamepad1.right_stick_y > 0) {
                if (gamepad1.right_bumper) {
                    FLMotor.setPower(1);
                    FRMotor.setPower(-1 + Math.abs(gamepad1.right_stick_y));
                    BLMotor.setPower(-1 + Math.abs(gamepad1.right_stick_y));
                    BRMotor.setPower(1);
                } else {
                    FLMotor.setPower(-1 + Math.abs(gamepad1.right_stick_y));
                    FRMotor.setPower(1);
                    BLMotor.setPower(1);
                    BRMotor.setPower(-1 + Math.abs(gamepad1.right_stick_y));
                }
            } else {
                if (gamepad1.right_bumper) {
                    FLMotor.setPower(1 - Math.abs(gamepad1.right_stick_y));
                    FRMotor.setPower(-1);
                    BLMotor.setPower(-1);
                    BRMotor.setPower(1 - Math.abs(gamepad1.right_stick_y));
                } else {
                    FLMotor.setPower(-1);
                    FRMotor.setPower(1 - Math.abs(gamepad1.right_stick_y));
                    BLMotor.setPower(1 - Math.abs(gamepad1.right_stick_y));
                    BRMotor.setPower(-1);
                }
            }

            //   }
        } else {
            FLMotor.setPower(FLPower);
            FRMotor.setPower(FRPower);
            BLMotor.setPower(BLPower);
            BRMotor.setPower(BRPower);
        }

        //intake code

        if(lTriggerPressed > .3) {
            IMotor.setPower(.8);
        }else if(rTriggerPressed > .3){
            IMotor.setPower(-.8);
        }else {
            IMotor.setPower(0);
        }



/*if (hExMotor.getCurrentPosition() > 1367 && intakeManualMode == true) {
    intakeManualMode = false;
    hExMotor.setPower (-1);
    hExMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
}else{
    intakeManualMode = true;
    if(intakeManualMode) {
        if (gamepad2.right_stick_y > 0.05 || gamepad2.right_stick_y < -0.05) {
            hExMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            hExMotor.setPower(-gamepad2.right_stick_y);
        }else{
            hExMotor.setPower(0);
        }
    }
}


      */  if(intakeManualMode) {
            if ((gamepad2.right_stick_y > 0.05 || gamepad2.right_stick_y < -0.05) && hExMotor.getCurrentPosition()<1300 && hExMotor.getCurrentPosition() > 5) {
                hExMotor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
                hExMotor.setPower(-gamepad2.right_stick_y);
            }else if ((gamepad2.right_stick_y > 0.05 || gamepad2.right_stick_y < -0.05) && (hExMotor.getCurrentPosition()>1300)) {
                hExMotor.setPower(-1);



            }else if ((gamepad2.right_stick_y > 0.05 || gamepad2.right_stick_y < -0.05) && (hExMotor.getCurrentPosition()<5)) {
                hExMotor.setPower(1);

            }else{
                hExMotor.setPower(0);
            }
        }
if (bButtonPressed) {                     // transfer system process
    wasBPressed = true;
}
    if (hExMotor.getCurrentPosition() != 5 && wasBPressed) {
        intakeManualMode = false;
        timer.schedule(new setIsIntakeMoving(true), 0);
        telemetry.addData("bButtonPressed", isBPressed);
        telemetry.update();
        timer.schedule(new rRPosition(2), 0);
        timer.schedule(new lLPosition(2), 0);
        timer.schedule(new hExPosition(3, 1), 0);
        timer.schedule(new topLPosition(0), 0);
        timer.schedule(new topRPosition(0), 0);
        timer.schedule(new topPinchPosition(2), 0);
        timer.schedule(new topWristPosition(2), 0);
        timer.schedule(new setManualMode(true), 10 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topLPosition(3), 11 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topRPosition(3), 11 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topPinchPosition(1), 16 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topLPosition(0), 21 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topRPosition(0), 21 * DELAY_BETWEEN_MOVES);
        timer.schedule(new rRPosition(0), 22 * DELAY_BETWEEN_MOVES);
        timer.schedule(new lLPosition(0), 22 * DELAY_BETWEEN_MOVES);
        timer.schedule(new topWristPosition(0), 26 * DELAY_BETWEEN_MOVES);
    }
// intake
        //More Buttons
        dPadUpPressed = gamepad2.dpad_up;
        dPadLeftPressed = gamepad2.dpad_left;
        dPadDownPressed = gamepad2.dpad_down;
        dPadRightPressed = gamepad2.dpad_right;
        leftBumperPressed = gamepad2.left_bumper;
        rightBumperPressed = gamepad2.right_bumper;
        xButtonPressed = gamepad2.x;
        aButtonPressed = gamepad2.a;
        bButtonPressed = gamepad2.b;
        yButtonPressed = gamepad2.y;
        lTriggerPressed = gamepad2.left_trigger;
        rTriggerPressed = gamepad2.right_trigger;


        //Claw Control
        if (leftBumperPressed && !oldLeftBumperPressed) {
           topPinchServo.setPosition(topPinchPositions[0]);
        } else if (rightBumperPressed && !oldRightBumperPressed) {
            topPinchServo.setPosition(topPinchPositions[1]);
        }


        /*if (lExMotor.getCurrentPosition() == lExMotor.getTargetPosition()) {
            isTargetAndCurrentPositionTheSame = true;
        } else {
            isTargetAndCurrentElPositionTheSame = false;
        }

        if (exMotor.getCurrentPosition() == exMotor.getTargetPosition()) {
            isTargetAndCurrentExPositionTheSame = true;
        } else {
            isTargetAndCurrentExPositionTheSame = false;
        }*/

        /*if (LAMotor.getCurrentPosition() == LAMotor.getTargetPosition()) {
            isTargetAndCurrentLAPositionTheSame = true;
        } else {
            isTargetAndCurrentLAPositionTheSame = false;
        }

        if (RAMotor.getCurrentPosition() == RAMotor.getTargetPosition()) {
            isTargetAndCurrentRAPositionTheSame = true;
        } else {
            isTargetAndCurrentRAPositionTheSame = false;
        }*/


        //hang code


        if (aButtonPressed && !oldaButtonPressed && !isArmMoving) { //neutral position index = 0
            timer.schedule(new setIsArmMoving(true), 0);
            timer.schedule(new vExPosition(0, 1), 0);
            timer.schedule(new vExPosition2(0, 1), 0);
            timer.schedule(new topLPosition(0), 0);
            timer.schedule(new topRPosition(0), 0);
            timer.schedule(new rRPosition(3), 0);
            timer.schedule(new lLPosition(3), 0);
            timer.schedule(new topWristPosition(0), 0);
            timer.schedule(new setIsArmMoving(false), 2 * DELAY_BETWEEN_MOVES);
            timer.schedule(new vExPower(0), 12 * DELAY_BETWEEN_MOVES);
        }

        if (xButtonPressed && !oldxButtonPressed && !isArmMoving) {// go down silly
            timer.schedule(new setIsArmMoving(true), 0);
            timer.schedule(new rRPosition(1), 0);
            timer.schedule(new lLPosition(1), 0);
            timer.schedule(new setIsArmMoving(false), 3 * DELAY_BETWEEN_MOVES);
        }



        if (yButtonPressed && !oldyButtonPressed && !isArmMoving) { //high basket index = 3
            timer.schedule(new setIsArmMoving(true), 0);
            timer.schedule(new vExPosition(1, 1), 0);
            timer.schedule(new vExPosition2(1, 1), 0);
            timer.schedule(new topLPosition(1), 0);
            timer.schedule(new topRPosition(1), 0);
            timer.schedule(new topWristPosition(1), 0);
            timer.schedule(new setIsArmMoving(false), 3 * DELAY_BETWEEN_MOVES);
        }

        if (dPadDownPressed && !oldDPadDownPressed && !isArmMoving) { //Wall grab
            timer.schedule(new topLPosition(4), 0);
            timer.schedule(new topRPosition(4), 0);
            timer.schedule(new topWristPosition(4), 0);


        }

        if (dPadUpPressed && !oldDPadUpPressed && !isArmMoving) { // High Rung Placement
            timer.schedule(new topLPosition(5), 0);
            timer.schedule(new topRPosition(5), 0);
            timer.schedule(new topWristPosition(5), 0);



        }

// this will kill the robot
        /*if (aButtonPressed && !oldaButtonPressed && bButtonPressed && !oldbButtonPressed && xButtonPressed && !oldxButtonPressed && yButtonPressed && !oldyButtonPressed && !isArmMoving) { //neutral position index = 0
            timer.schedule(new vExPosition(0, 1), 0);
            timer.schedule(new vExPosition2(1, 1), 0);
            timer.schedule(new hExPosition(5, 5), 0);
            timer.schedule(new rRPosition(5), 0);
            timer.schedule(new lLPosition(5), 0);

        }
*/





        //Buttons
        oldDPadDownPressed = dPadDownPressed;
        oldDPadUpPressed = dPadUpPressed;
        oldDPadLeftPressed = dPadLeftPressed;
        oldDPadRightPressed = dPadRightPressed;
        oldLeftBumperPressed = leftBumperPressed;
        oldRightBumperPressed = rightBumperPressed;
        oldaButtonPressed = aButtonPressed;
        oldbButtonPressed = bButtonPressed;
        oldxButtonPressed = xButtonPressed;
        oldyButtonPressed = yButtonPressed;


        double vExPosition = vExMotor.getCurrentPosition();
        double vExPosition2 = vExMotor.getCurrentPosition();
        double hExPosition = hExMotor.getCurrentPosition();
        // double LAPosition = LAMotor.getCurrentPosition();
        // double RAPosition = RAMotor.getCurrentPosition();


        double vExDesiredPosition = vExMotor.getTargetPosition();
        double vExDesiredPosition2 = vExMotor.getTargetPosition();
        double hExDesiredPosition = hExMotor.getTargetPosition();
        // double LADesiredPosition = LAMotor.getTargetPosition();
        //double RADesiredPosition = RAMotor.getTargetPosition();

        telemetry.addData("vEx Encoder Position Left", vExPosition);
        telemetry.addData("vEx Encoder Position Right", vExPosition2);
        telemetry.addData("hEx Encoder Position", hExPosition);
        //telemetry.addData("LA Encoder Position", LAPosition);
        //telemetry.addData("RA Encoder Position", RAPosition);
        telemetry.addData("vEx Encoder Targeted Position Left", vExDesiredPosition);
        telemetry.addData("vEx Encoder Targeted Position Right", vExDesiredPosition);
        telemetry.addData("hEx Encoder CurrentPosition", hExDesiredPosition);
        // telemetry.addData("LA Encoder Targeted Position", LADesiredPosition);
        // telemetry.addData("RA Encoder Targeted Position", RADesiredPosition);
        telemetry.update();
    }


    /*
     * Code to run ONCE after the driver hits STOP
     */

    @Override
    public void stop() {
    }
}
//https://www.google.com/search?sca_esv=c7c67eb20f0b5775&rlz=1C1GCEA_enUS1131US1131&q=clearly+you+don%27t+own+an+air+fryer&udm=2&fbs=AEQNm0Aa4sjWe7Rqy32pFwRj0UkWd8nbOJfsBGGB5IQQO6L3JyWp6w6_rxLPe8F8fpm5a57iruiBaetC-P1z8A1EgSEtGoKiI-tyuuiDuAjQZN76zaAbPytU70vrRXfg6Tgzjij5R_Re136YiAiZQmK01ZhFDaBKvuWzjRrVqF2bxrJnMYbpGsRQzdzMtgTRsg_T6B4z0T9loWGkBjDF7Xezy_v0ygoVag&sa=X&ved=2ahUKEwjq9qWr3raKAxVQElkFHYH2IEQQtKgLegQIFBAB&biw=1536&bih=695&dpr=1.25&safe=active&ssui=on#vhid=wbIFEtSOIZAwvM&vssid=mosaic
